// Generated by jextract

package libim;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$32 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$32() {}
    static final FunctionDescriptor plist_data_val_compare_with_size$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle plist_data_val_compare_with_size$MH = RuntimeHelper.downcallHandle(
        "plist_data_val_compare_with_size",
        constants$32.plist_data_val_compare_with_size$FUNC
    );
    static final FunctionDescriptor plist_data_val_contains$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle plist_data_val_contains$MH = RuntimeHelper.downcallHandle(
        "plist_data_val_contains",
        constants$32.plist_data_val_contains$FUNC
    );
    static final FunctionDescriptor plist_sort$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle plist_sort$MH = RuntimeHelper.downcallHandle(
        "plist_sort",
        constants$32.plist_sort$FUNC
    );
    static final FunctionDescriptor plist_mem_free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle plist_mem_free$MH = RuntimeHelper.downcallHandle(
        "plist_mem_free",
        constants$32.plist_mem_free$FUNC
    );
    static final FunctionDescriptor plist_set_debug$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle plist_set_debug$MH = RuntimeHelper.downcallHandle(
        "plist_set_debug",
        constants$32.plist_set_debug$FUNC
    );
    static final FunctionDescriptor idevice_event_cb_t$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor idevice_event_cb_t_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle idevice_event_cb_t_UP$MH = RuntimeHelper.upcallHandle(idevice_event_cb_t.class, "apply", constants$32.idevice_event_cb_t_UP$FUNC);
}


