// Generated by jextract

package libim;

import java.util.logging.Level;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.*;
public class libimobiledevice_h  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 37
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_STAT_H 1
     * }
     */
    public static int _SYS_STAT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STAT_H 1
     * }
     */
    public static int _BITS_STAT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STRUCT_STAT_H 1
     * }
     */
    public static int _BITS_STRUCT_STAT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __S_IFMT 61440
     * }
     */
    public static int __S_IFMT() {
        return (int)61440L;
    }
    /**
     * {@snippet :
     * #define __S_IFDIR 16384
     * }
     */
    public static int __S_IFDIR() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define __S_IFCHR 8192
     * }
     */
    public static int __S_IFCHR() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define __S_IFBLK 24576
     * }
     */
    public static int __S_IFBLK() {
        return (int)24576L;
    }
    /**
     * {@snippet :
     * #define __S_IFREG 32768
     * }
     */
    public static int __S_IFREG() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define __S_IFIFO 4096
     * }
     */
    public static int __S_IFIFO() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define __S_IFLNK 40960
     * }
     */
    public static int __S_IFLNK() {
        return (int)40960L;
    }
    /**
     * {@snippet :
     * #define __S_IFSOCK 49152
     * }
     */
    public static int __S_IFSOCK() {
        return (int)49152L;
    }
    /**
     * {@snippet :
     * #define __S_ISUID 2048
     * }
     */
    public static int __S_ISUID() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define __S_ISGID 1024
     * }
     */
    public static int __S_ISGID() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define __S_ISVTX 512
     * }
     */
    public static int __S_ISVTX() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define __S_IREAD 256
     * }
     */
    public static int __S_IREAD() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define __S_IWRITE 128
     * }
     */
    public static int __S_IWRITE() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __S_IEXEC 64
     * }
     */
    public static int __S_IEXEC() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define S_BLKSIZE 512
     * }
     */
    public static int S_BLKSIZE() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDIO_H 1
     * }
     */
    public static int _STDIO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos_t_defined 1
     * }
     */
    public static int _____fpos_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____mbstate_t_defined 1
     * }
     */
    public static int ____mbstate_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos64_t_defined 1
     * }
     */
    public static int _____fpos64_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____FILE_defined 1
     * }
     */
    public static int ____FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FILE_defined 1
     * }
     */
    public static int __FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __struct_FILE_defined 1
     * }
     */
    public static int __struct_FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IO_EOF_SEEN 16
     * }
     */
    public static int _IO_EOF_SEEN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _IO_ERR_SEEN 32
     * }
     */
    public static int _IO_ERR_SEEN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _IO_USER_LOCK 32768
     * }
     */
    public static int _IO_USER_LOCK() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define BUFSIZ 8192
     * }
     */
    public static int BUFSIZ() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDIO_LIM_H 1
     * }
     */
    public static int _BITS_STDIO_LIM_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define L_tmpnam 20
     * }
     */
    public static int L_tmpnam() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define TMP_MAX 238328
     * }
     */
    public static int TMP_MAX() {
        return (int)238328L;
    }
    /**
     * {@snippet :
     * #define FILENAME_MAX 4096
     * }
     */
    public static int FILENAME_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define L_ctermid 9
     * }
     */
    public static int L_ctermid() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define FOPEN_MAX 16
     * }
     */
    public static int FOPEN_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __suseconds64_t;
     * }
     */
    public static final OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast16_t;
     * }
     */
    public static final OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast32_t;
     * }
     */
    public static final OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast16_t;
     * }
     */
    public static final OfLong uint_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast32_t;
     * }
     */
    public static final OfLong uint_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$0.select$MH,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$0.pselect$MH,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timespec* __timeout, const __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle stat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.stat$MH,"stat");
    }
    /**
     * {@snippet :
     * int stat(char* __file, struct stat* __buf);
     * }
     */
    public static int stat(MemorySegment __file, MemorySegment __buf) {
        var mh$ = stat$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fstat$MH,"fstat");
    }
    /**
     * {@snippet :
     * int fstat(int __fd, struct stat* __buf);
     * }
     */
    public static int fstat(int __fd, MemorySegment __buf) {
        var mh$ = fstat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fstatat$MH,"fstatat");
    }
    /**
     * {@snippet :
     * int fstatat(int __fd, char* __file, struct stat* __buf, int __flag);
     * }
     */
    public static int fstatat(int __fd, MemorySegment __file, MemorySegment __buf, int __flag) {
        var mh$ = fstatat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __buf, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.lstat$MH,"lstat");
    }
    /**
     * {@snippet :
     * int lstat(char* __file, struct stat* __buf);
     * }
     */
    public static int lstat(MemorySegment __file, MemorySegment __buf) {
        var mh$ = lstat$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chmod$MH() {
        return RuntimeHelper.requireNonNull(constants$1.chmod$MH,"chmod");
    }
    /**
     * {@snippet :
     * int chmod(char* __file, __mode_t __mode);
     * }
     */
    public static int chmod(MemorySegment __file, int __mode) {
        var mh$ = chmod$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$1.lchmod$MH,"lchmod");
    }
    /**
     * {@snippet :
     * int lchmod(char* __file, __mode_t __mode);
     * }
     */
    public static int lchmod(MemorySegment __file, int __mode) {
        var mh$ = lchmod$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fchmod$MH,"fchmod");
    }
    /**
     * {@snippet :
     * int fchmod(int __fd, __mode_t __mode);
     * }
     */
    public static int fchmod(int __fd, int __mode) {
        var mh$ = fchmod$MH();
        try {
            return (int)mh$.invokeExact(__fd, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmodat$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fchmodat$MH,"fchmodat");
    }
    /**
     * {@snippet :
     * int fchmodat(int __fd, char* __file, __mode_t __mode, int __flag);
     * }
     */
    public static int fchmodat(int __fd, MemorySegment __file, int __mode, int __flag) {
        var mh$ = fchmodat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __mode, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle umask$MH() {
        return RuntimeHelper.requireNonNull(constants$1.umask$MH,"umask");
    }
    /**
     * {@snippet :
     * __mode_t umask(__mode_t __mask);
     * }
     */
    public static int umask(int __mask) {
        var mh$ = umask$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$1.mkdir$MH,"mkdir");
    }
    /**
     * {@snippet :
     * int mkdir(char* __path, __mode_t __mode);
     * }
     */
    public static int mkdir(MemorySegment __path, int __mode) {
        var mh$ = mkdir$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdirat$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mkdirat$MH,"mkdirat");
    }
    /**
     * {@snippet :
     * int mkdirat(int __fd, char* __path, __mode_t __mode);
     * }
     */
    public static int mkdirat(int __fd, MemorySegment __path, int __mode) {
        var mh$ = mkdirat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mknod$MH,"mknod");
    }
    /**
     * {@snippet :
     * int mknod(char* __path, __mode_t __mode, __dev_t __dev);
     * }
     */
    public static int mknod(MemorySegment __path, int __mode, long __dev) {
        var mh$ = mknod$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknodat$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mknodat$MH,"mknodat");
    }
    /**
     * {@snippet :
     * int mknodat(int __fd, char* __path, __mode_t __mode, __dev_t __dev);
     * }
     */
    public static int mknodat(int __fd, MemorySegment __path, int __mode, long __dev) {
        var mh$ = mknodat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifo$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mkfifo$MH,"mkfifo");
    }
    /**
     * {@snippet :
     * int mkfifo(char* __path, __mode_t __mode);
     * }
     */
    public static int mkfifo(MemorySegment __path, int __mode) {
        var mh$ = mkfifo$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifoat$MH() {
        return RuntimeHelper.requireNonNull(constants$2.mkfifoat$MH,"mkfifoat");
    }
    /**
     * {@snippet :
     * int mkfifoat(int __fd, char* __path, __mode_t __mode);
     * }
     */
    public static int mkfifoat(int __fd, MemorySegment __path, int __mode) {
        var mh$ = mkfifoat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimensat$MH() {
        return RuntimeHelper.requireNonNull(constants$2.utimensat$MH,"utimensat");
    }
    /**
     * {@snippet :
     * int utimensat(int __fd, char* __path, struct timespec __times[2], int __flags);
     * }
     */
    public static int utimensat(int __fd, MemorySegment __path, MemorySegment __times, int __flags) {
        var mh$ = utimensat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __times, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimens$MH() {
        return RuntimeHelper.requireNonNull(constants$3.futimens$MH,"futimens");
    }
    /**
     * {@snippet :
     * int futimens(int __fd, struct timespec __times[2]);
     * }
     */
    public static int futimens(int __fd, MemorySegment __times) {
        var mh$ = futimens$MH();
        try {
            return (int)mh$.invokeExact(__fd, __times);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout stdin$LAYOUT() {
        return constants$3.stdin$LAYOUT;
    }
    public static VarHandle stdin$VH() {
        return constants$3.stdin$VH;
    }
    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.stdin$SEGMENT,"stdin");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static MemorySegment stdin$get() {
        return (java.lang.foreign.MemorySegment) constants$3.stdin$VH.get(RuntimeHelper.requireNonNull(constants$3.stdin$SEGMENT, "stdin"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static void stdin$set(MemorySegment x) {
        constants$3.stdin$VH.set(RuntimeHelper.requireNonNull(constants$3.stdin$SEGMENT, "stdin"), x);
    }
    public static MemoryLayout stdout$LAYOUT() {
        return constants$3.stdout$LAYOUT;
    }
    public static VarHandle stdout$VH() {
        return constants$3.stdout$VH;
    }
    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.stdout$SEGMENT,"stdout");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static MemorySegment stdout$get() {
        return (java.lang.foreign.MemorySegment) constants$3.stdout$VH.get(RuntimeHelper.requireNonNull(constants$3.stdout$SEGMENT, "stdout"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static void stdout$set(MemorySegment x) {
        constants$3.stdout$VH.set(RuntimeHelper.requireNonNull(constants$3.stdout$SEGMENT, "stdout"), x);
    }
    public static MemoryLayout stderr$LAYOUT() {
        return constants$3.stderr$LAYOUT;
    }
    public static VarHandle stderr$VH() {
        return constants$3.stderr$VH;
    }
    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.stderr$SEGMENT,"stderr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static MemorySegment stderr$get() {
        return (java.lang.foreign.MemorySegment) constants$3.stderr$VH.get(RuntimeHelper.requireNonNull(constants$3.stderr$SEGMENT, "stderr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static void stderr$set(MemorySegment x) {
        constants$3.stderr$VH.set(RuntimeHelper.requireNonNull(constants$3.stderr$SEGMENT, "stderr"), x);
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$3.remove$MH,"remove");
    }
    /**
     * {@snippet :
     * int remove(char* __filename);
     * }
     */
    public static int remove(MemorySegment __filename) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$3.rename$MH,"rename");
    }
    /**
     * {@snippet :
     * int rename(char* __old, char* __new);
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.renameat$MH,"renameat");
    }
    /**
     * {@snippet :
     * int renameat(int __oldfd, char* __old, int __newfd, char* __new);
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fclose$MH,"fclose");
    }
    /**
     * {@snippet :
     * int fclose(FILE* __stream);
     * }
     */
    public static int fclose(MemorySegment __stream) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$4.tmpfile$MH,"tmpfile");
    }
    /**
     * {@snippet :
     * FILE* tmpfile();
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$4.tmpnam$MH,"tmpnam");
    }
    /**
     * {@snippet :
     * char* tmpnam(char [20]);
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.tmpnam_r$MH,"tmpnam_r");
    }
    /**
     * {@snippet :
     * char* tmpnam_r(char __s[20]);
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s) {
        var mh$ = tmpnam_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$4.tempnam$MH,"tempnam");
    }
    /**
     * {@snippet :
     * char* tempnam(char* __dir, char* __pfx);
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fflush$MH,"fflush");
    }
    /**
     * {@snippet :
     * int fflush(FILE* __stream);
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fflush_unlocked$MH,"fflush_unlocked");
    }
    /**
     * {@snippet :
     * int fflush_unlocked(FILE* __stream);
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fopen$MH,"fopen");
    }
    /**
     * {@snippet :
     * FILE* fopen(char* __filename, char* __modes);
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$5.freopen$MH,"freopen");
    }
    /**
     * {@snippet :
     * FILE* freopen(char* __filename, char* __modes, FILE* __stream);
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes, MemorySegment __stream) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fdopen$MH,"fdopen");
    }
    /**
     * {@snippet :
     * FILE* fdopen(int __fd, char* __modes);
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fmemopen$MH,"fmemopen");
    }
    /**
     * {@snippet :
     * FILE* fmemopen(void* __s, size_t __len, char* __modes);
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$6.open_memstream$MH,"open_memstream");
    }
    /**
     * {@snippet :
     * FILE* open_memstream(char** __bufloc, size_t* __sizeloc);
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.setbuf$MH,"setbuf");
    }
    /**
     * {@snippet :
     * void setbuf(FILE* __stream, char* __buf);
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.setvbuf$MH,"setvbuf");
    }
    /**
     * {@snippet :
     * int setvbuf(FILE* __stream, char* __buf, int __modes, size_t __n);
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$6.setbuffer$MH,"setbuffer");
    }
    /**
     * {@snippet :
     * void setbuffer(FILE* __stream, char* __buf, size_t __size);
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.setlinebuf$MH,"setlinebuf");
    }
    /**
     * {@snippet :
     * void setlinebuf(FILE* __stream);
     * }
     */
    public static void setlinebuf(MemorySegment __stream) {
        var mh$ = setlinebuf$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fprintf$MH,"fprintf");
    }
    /**
     * {@snippet :
     * int fprintf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fprintf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.printf$MH,"printf");
    }
    /**
     * {@snippet :
     * int printf(char* __format,...);
     * }
     */
    public static int printf(MemorySegment __format, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.sprintf$MH,"sprintf");
    }
    /**
     * {@snippet :
     * int sprintf(char* __s, char* __format,...);
     * }
     */
    public static int sprintf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vfprintf$MH,"vfprintf");
    }
    /**
     * {@snippet :
     * int vfprintf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vprintf$MH,"vprintf");
    }
    /**
     * {@snippet :
     * int vprintf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vprintf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vsprintf$MH,"vsprintf");
    }
    /**
     * {@snippet :
     * int vsprintf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.snprintf$MH,"snprintf");
    }
    /**
     * {@snippet :
     * int snprintf(char* __s, size_t __maxlen, char* __format,...);
     * }
     */
    public static int snprintf(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.vsnprintf$MH,"vsnprintf");
    }
    /**
     * {@snippet :
     * int vsnprintf(char* __s, size_t __maxlen, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsnprintf(MemorySegment __s, long __maxlen, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.vdprintf$MH,"vdprintf");
    }
    /**
     * {@snippet :
     * int vdprintf(int __fd, char* __fmt, __gnuc_va_list __arg);
     * }
     */
    public static int vdprintf(int __fd, MemorySegment __fmt, MemorySegment __arg) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.dprintf$MH,"dprintf");
    }
    /**
     * {@snippet :
     * int dprintf(int __fd, char* __fmt,...);
     * }
     */
    public static int dprintf(int __fd, MemorySegment __fmt, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fscanf$MH,"fscanf");
    }
    /**
     * {@snippet :
     * int fscanf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fscanf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.scanf$MH,"scanf");
    }
    /**
     * {@snippet :
     * int scanf(char* __format,...);
     * }
     */
    public static int scanf(MemorySegment __format, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sscanf$MH,"sscanf");
    }
    /**
     * {@snippet :
     * int sscanf(char* __s, char* __format,...);
     * }
     */
    public static int sscanf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.vfscanf$MH,"vfscanf");
    }
    /**
     * {@snippet :
     * int vfscanf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.vscanf$MH,"vscanf");
    }
    /**
     * {@snippet :
     * int vscanf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.vsscanf$MH,"vsscanf");
    }
    /**
     * {@snippet :
     * int vsscanf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fgetc$MH,"fgetc");
    }
    /**
     * {@snippet :
     * int fgetc(FILE* __stream);
     * }
     */
    public static int fgetc(MemorySegment __stream) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.getc$MH,"getc");
    }
    /**
     * {@snippet :
     * int getc(FILE* __stream);
     * }
     */
    public static int getc(MemorySegment __stream) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$9.getchar$MH,"getchar");
    }
    /**
     * {@snippet :
     * int getchar();
     * }
     */
    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getc_unlocked$MH,"getc_unlocked");
    }
    /**
     * {@snippet :
     * int getc_unlocked(FILE* __stream);
     * }
     */
    public static int getc_unlocked(MemorySegment __stream) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getchar_unlocked$MH,"getchar_unlocked");
    }
    /**
     * {@snippet :
     * int getchar_unlocked();
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fgetc_unlocked$MH,"fgetc_unlocked");
    }
    /**
     * {@snippet :
     * int fgetc_unlocked(FILE* __stream);
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream) {
        var mh$ = fgetc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fputc$MH,"fputc");
    }
    /**
     * {@snippet :
     * int fputc(int __c, FILE* __stream);
     * }
     */
    public static int fputc(int __c, MemorySegment __stream) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putc$MH,"putc");
    }
    /**
     * {@snippet :
     * int putc(int __c, FILE* __stream);
     * }
     */
    public static int putc(int __c, MemorySegment __stream) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putchar$MH,"putchar");
    }
    /**
     * {@snippet :
     * int putchar(int __c);
     * }
     */
    public static int putchar(int __c) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fputc_unlocked$MH,"fputc_unlocked");
    }
    /**
     * {@snippet :
     * int fputc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = fputc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$11.putc_unlocked$MH,"putc_unlocked");
    }
    /**
     * {@snippet :
     * int putc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$11.putchar_unlocked$MH,"putchar_unlocked");
    }
    /**
     * {@snippet :
     * int putchar_unlocked(int __c);
     * }
     */
    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$11.getw$MH,"getw");
    }
    /**
     * {@snippet :
     * int getw(FILE* __stream);
     * }
     */
    public static int getw(MemorySegment __stream) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$11.putw$MH,"putw");
    }
    /**
     * {@snippet :
     * int putw(int __w, FILE* __stream);
     * }
     */
    public static int putw(int __w, MemorySegment __stream) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fgets$MH,"fgets");
    }
    /**
     * {@snippet :
     * char* fgets(char* __s, int __n, FILE* __stream);
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$12.__getdelim$MH,"__getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t __getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = __getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getdelim$MH,"getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getline$MH,"getline");
    }
    /**
     * {@snippet :
     * __ssize_t getline(char** __lineptr, size_t* __n, FILE* __stream);
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fputs$MH,"fputs");
    }
    /**
     * {@snippet :
     * int fputs(char* __s, FILE* __stream);
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$12.puts$MH,"puts");
    }
    /**
     * {@snippet :
     * int puts(char* __s);
     * }
     */
    public static int puts(MemorySegment __s) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ungetc$MH,"ungetc");
    }
    /**
     * {@snippet :
     * int ungetc(int __c, FILE* __stream);
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fread$MH,"fread");
    }
    /**
     * {@snippet :
     * unsigned long fread(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fwrite$MH,"fwrite");
    }
    /**
     * {@snippet :
     * unsigned long fwrite(void* __ptr, size_t __size, size_t __n, FILE* __s);
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fread_unlocked$MH,"fread_unlocked");
    }
    /**
     * {@snippet :
     * size_t fread_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fwrite_unlocked$MH,"fwrite_unlocked");
    }
    /**
     * {@snippet :
     * size_t fwrite_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fwrite_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fseek$MH,"fseek");
    }
    /**
     * {@snippet :
     * int fseek(FILE* __stream, long __off, int __whence);
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ftell$MH,"ftell");
    }
    /**
     * {@snippet :
     * long ftell(FILE* __stream);
     * }
     */
    public static long ftell(MemorySegment __stream) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$14.rewind$MH,"rewind");
    }
    /**
     * {@snippet :
     * void rewind(FILE* __stream);
     * }
     */
    public static void rewind(MemorySegment __stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fseeko$MH,"fseeko");
    }
    /**
     * {@snippet :
     * int fseeko(FILE* __stream, __off_t __off, int __whence);
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ftello$MH,"ftello");
    }
    /**
     * {@snippet :
     * __off_t ftello(FILE* __stream);
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fgetpos$MH,"fgetpos");
    }
    /**
     * {@snippet :
     * int fgetpos(FILE* __stream, fpos_t* __pos);
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fsetpos$MH,"fsetpos");
    }
    /**
     * {@snippet :
     * int fsetpos(FILE* __stream, const fpos_t* __pos);
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$14.clearerr$MH,"clearerr");
    }
    /**
     * {@snippet :
     * void clearerr(FILE* __stream);
     * }
     */
    public static void clearerr(MemorySegment __stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$15.feof$MH,"feof");
    }
    /**
     * {@snippet :
     * int feof(FILE* __stream);
     * }
     */
    public static int feof(MemorySegment __stream) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ferror$MH,"ferror");
    }
    /**
     * {@snippet :
     * int ferror(FILE* __stream);
     * }
     */
    public static int ferror(MemorySegment __stream) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$15.clearerr_unlocked$MH,"clearerr_unlocked");
    }
    /**
     * {@snippet :
     * void clearerr_unlocked(FILE* __stream);
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream) {
        var mh$ = clearerr_unlocked$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$15.feof_unlocked$MH,"feof_unlocked");
    }
    /**
     * {@snippet :
     * int feof_unlocked(FILE* __stream);
     * }
     */
    public static int feof_unlocked(MemorySegment __stream) {
        var mh$ = feof_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ferror_unlocked$MH,"ferror_unlocked");
    }
    /**
     * {@snippet :
     * int ferror_unlocked(FILE* __stream);
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream) {
        var mh$ = ferror_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$15.perror$MH,"perror");
    }
    /**
     * {@snippet :
     * void perror(char* __s);
     * }
     */
    public static void perror(MemorySegment __s) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fileno$MH,"fileno");
    }
    /**
     * {@snippet :
     * int fileno(FILE* __stream);
     * }
     */
    public static int fileno(MemorySegment __stream) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fileno_unlocked$MH,"fileno_unlocked");
    }
    /**
     * {@snippet :
     * int fileno_unlocked(FILE* __stream);
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream) {
        var mh$ = fileno_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$16.pclose$MH,"pclose");
    }
    /**
     * {@snippet :
     * int pclose(FILE* __stream);
     * }
     */
    public static int pclose(MemorySegment __stream) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.popen$MH,"popen");
    }
    /**
     * {@snippet :
     * FILE* popen(char* __command, char* __modes);
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ctermid$MH,"ctermid");
    }
    /**
     * {@snippet :
     * char* ctermid(char* __s);
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$16.flockfile$MH,"flockfile");
    }
    /**
     * {@snippet :
     * void flockfile(FILE* __stream);
     * }
     */
    public static void flockfile(MemorySegment __stream) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ftrylockfile$MH,"ftrylockfile");
    }
    /**
     * {@snippet :
     * int ftrylockfile(FILE* __stream);
     * }
     */
    public static int ftrylockfile(MemorySegment __stream) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$17.funlockfile$MH,"funlockfile");
    }
    /**
     * {@snippet :
     * void funlockfile(FILE* __stream);
     * }
     */
    public static void funlockfile(MemorySegment __stream) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__uflow$MH,"__uflow");
    }
    /**
     * {@snippet :
     * int __uflow(FILE*);
     * }
     */
    public static int __uflow(MemorySegment x0) {
        var mh$ = __uflow$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__overflow$MH,"__overflow");
    }
    /**
     * {@snippet :
     * int __overflow(FILE*, int);
     * }
     */
    public static int __overflow(MemorySegment x0, int x1) {
        var mh$ = __overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* plist_t;
     * }
     */
    public static final OfAddress plist_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* plist_dict_iter;
     * }
     */
    public static final OfAddress plist_dict_iter = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* plist_array_iter;
     * }
     */
    public static final OfAddress plist_array_iter = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum .PLIST_NONE = -1;
     * }
     */
    public static int PLIST_NONE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .PLIST_BOOLEAN = 0;
     * }
     */
    public static int PLIST_BOOLEAN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PLIST_INT = 1;
     * }
     */
    public static int PLIST_INT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PLIST_REAL = 2;
     * }
     */
    public static int PLIST_REAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .PLIST_STRING = 3;
     * }
     */
    public static int PLIST_STRING() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .PLIST_ARRAY = 4;
     * }
     */
    public static int PLIST_ARRAY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .PLIST_DICT = 5;
     * }
     */
    public static int PLIST_DICT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .PLIST_DATE = 6;
     * }
     */
    public static int PLIST_DATE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .PLIST_DATA = 7;
     * }
     */
    public static int PLIST_DATA() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .PLIST_KEY = 8;
     * }
     */
    public static int PLIST_KEY() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .PLIST_UID = 9;
     * }
     */
    public static int PLIST_UID() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .PLIST_NULL = 10;
     * }
     */
    public static int PLIST_NULL() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .PLIST_ERR_SUCCESS = 0;
     * }
     */
    public static int PLIST_ERR_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PLIST_ERR_INVALID_ARG = -1;
     * }
     */
    public static int PLIST_ERR_INVALID_ARG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .PLIST_ERR_FORMAT = -2;
     * }
     */
    public static int PLIST_ERR_FORMAT() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * enum .PLIST_ERR_PARSE = -3;
     * }
     */
    public static int PLIST_ERR_PARSE() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * enum .PLIST_ERR_NO_MEM = -4;
     * }
     */
    public static int PLIST_ERR_NO_MEM() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * enum .PLIST_ERR_IO = -5;
     * }
     */
    public static int PLIST_ERR_IO() {
        return (int)-5L;
    }
    /**
     * {@snippet :
     * enum .PLIST_ERR_UNKNOWN = -255;
     * }
     */
    public static int PLIST_ERR_UNKNOWN() {
        return (int)-255L;
    }
    /**
     * {@snippet :
     * enum .PLIST_FORMAT_XML = 1;
     * }
     */
    public static int PLIST_FORMAT_XML() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PLIST_FORMAT_BINARY = 2;
     * }
     */
    public static int PLIST_FORMAT_BINARY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .PLIST_FORMAT_JSON = 3;
     * }
     */
    public static int PLIST_FORMAT_JSON() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .PLIST_FORMAT_OSTEP = 4;
     * }
     */
    public static int PLIST_FORMAT_OSTEP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .PLIST_FORMAT_PRINT = 10;
     * }
     */
    public static int PLIST_FORMAT_PRINT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .PLIST_FORMAT_LIMD = 11;
     * }
     */
    public static int PLIST_FORMAT_LIMD() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .PLIST_FORMAT_PLUTIL = 12;
     * }
     */
    public static int PLIST_FORMAT_PLUTIL() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .PLIST_OPT_COMPACT = 1;
     * }
     */
    public static int PLIST_OPT_COMPACT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PLIST_OPT_PARTIAL_DATA = 2;
     * }
     */
    public static int PLIST_OPT_PARTIAL_DATA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .PLIST_OPT_NO_NEWLINE = 4;
     * }
     */
    public static int PLIST_OPT_NO_NEWLINE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .PLIST_OPT_INDENT = 8;
     * }
     */
    public static int PLIST_OPT_INDENT() {
        return (int)8L;
    }
    public static MethodHandle plist_new_dict$MH() {
        return RuntimeHelper.requireNonNull(constants$17.plist_new_dict$MH,"plist_new_dict");
    }
    /**
     * {@snippet :
     * plist_t plist_new_dict();
     * }
     */
    public static MemorySegment plist_new_dict() {
        var mh$ = plist_new_dict$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_array$MH() {
        return RuntimeHelper.requireNonNull(constants$17.plist_new_array$MH,"plist_new_array");
    }
    /**
     * {@snippet :
     * plist_t plist_new_array();
     * }
     */
    public static MemorySegment plist_new_array() {
        var mh$ = plist_new_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_string$MH() {
        return RuntimeHelper.requireNonNull(constants$18.plist_new_string$MH,"plist_new_string");
    }
    /**
     * {@snippet :
     * plist_t plist_new_string(char* val);
     * }
     */
    public static MemorySegment plist_new_string(MemorySegment val) {
        var mh$ = plist_new_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_bool$MH() {
        return RuntimeHelper.requireNonNull(constants$18.plist_new_bool$MH,"plist_new_bool");
    }
    /**
     * {@snippet :
     * plist_t plist_new_bool(uint8_t val);
     * }
     */
    public static MemorySegment plist_new_bool(byte val) {
        var mh$ = plist_new_bool$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$18.plist_new_uint$MH,"plist_new_uint");
    }
    /**
     * {@snippet :
     * plist_t plist_new_uint(uint64_t val);
     * }
     */
    public static MemorySegment plist_new_uint(long val) {
        var mh$ = plist_new_uint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_int$MH() {
        return RuntimeHelper.requireNonNull(constants$18.plist_new_int$MH,"plist_new_int");
    }
    /**
     * {@snippet :
     * plist_t plist_new_int(int64_t val);
     * }
     */
    public static MemorySegment plist_new_int(long val) {
        var mh$ = plist_new_int$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_real$MH() {
        return RuntimeHelper.requireNonNull(constants$18.plist_new_real$MH,"plist_new_real");
    }
    /**
     * {@snippet :
     * plist_t plist_new_real(double val);
     * }
     */
    public static MemorySegment plist_new_real(double val) {
        var mh$ = plist_new_real$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_data$MH() {
        return RuntimeHelper.requireNonNull(constants$18.plist_new_data$MH,"plist_new_data");
    }
    /**
     * {@snippet :
     * plist_t plist_new_data(char* val, uint64_t length);
     * }
     */
    public static MemorySegment plist_new_data(MemorySegment val, long length) {
        var mh$ = plist_new_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(val, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_date$MH() {
        return RuntimeHelper.requireNonNull(constants$19.plist_new_date$MH,"plist_new_date");
    }
    /**
     * {@snippet :
     * plist_t plist_new_date(int32_t sec, int32_t usec);
     * }
     */
    public static MemorySegment plist_new_date(int sec, int usec) {
        var mh$ = plist_new_date$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sec, usec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_uid$MH() {
        return RuntimeHelper.requireNonNull(constants$19.plist_new_uid$MH,"plist_new_uid");
    }
    /**
     * {@snippet :
     * plist_t plist_new_uid(uint64_t val);
     * }
     */
    public static MemorySegment plist_new_uid(long val) {
        var mh$ = plist_new_uid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$19.plist_new_null$MH,"plist_new_null");
    }
    /**
     * {@snippet :
     * plist_t plist_new_null();
     * }
     */
    public static MemorySegment plist_new_null() {
        var mh$ = plist_new_null$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_free$MH() {
        return RuntimeHelper.requireNonNull(constants$19.plist_free$MH,"plist_free");
    }
    /**
     * {@snippet :
     * void plist_free(plist_t plist);
     * }
     */
    public static void plist_free(MemorySegment plist) {
        var mh$ = plist_free$MH();
        try {
            mh$.invokeExact(plist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$19.plist_copy$MH,"plist_copy");
    }
    /**
     * {@snippet :
     * plist_t plist_copy(plist_t node);
     * }
     */
    public static MemorySegment plist_copy(MemorySegment node) {
        var mh$ = plist_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$19.plist_array_get_size$MH,"plist_array_get_size");
    }
    /**
     * {@snippet :
     * uint32_t plist_array_get_size(plist_t node);
     * }
     */
    public static int plist_array_get_size(MemorySegment node) {
        var mh$ = plist_array_get_size$MH();
        try {
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_get_item$MH() {
        return RuntimeHelper.requireNonNull(constants$20.plist_array_get_item$MH,"plist_array_get_item");
    }
    /**
     * {@snippet :
     * plist_t plist_array_get_item(plist_t node, uint32_t n);
     * }
     */
    public static MemorySegment plist_array_get_item(MemorySegment node, int n) {
        var mh$ = plist_array_get_item$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_get_item_index$MH() {
        return RuntimeHelper.requireNonNull(constants$20.plist_array_get_item_index$MH,"plist_array_get_item_index");
    }
    /**
     * {@snippet :
     * uint32_t plist_array_get_item_index(plist_t node);
     * }
     */
    public static int plist_array_get_item_index(MemorySegment node) {
        var mh$ = plist_array_get_item_index$MH();
        try {
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_set_item$MH() {
        return RuntimeHelper.requireNonNull(constants$20.plist_array_set_item$MH,"plist_array_set_item");
    }
    /**
     * {@snippet :
     * void plist_array_set_item(plist_t node, plist_t item, uint32_t n);
     * }
     */
    public static void plist_array_set_item(MemorySegment node, MemorySegment item, int n) {
        var mh$ = plist_array_set_item$MH();
        try {
            mh$.invokeExact(node, item, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_append_item$MH() {
        return RuntimeHelper.requireNonNull(constants$20.plist_array_append_item$MH,"plist_array_append_item");
    }
    /**
     * {@snippet :
     * void plist_array_append_item(plist_t node, plist_t item);
     * }
     */
    public static void plist_array_append_item(MemorySegment node, MemorySegment item) {
        var mh$ = plist_array_append_item$MH();
        try {
            mh$.invokeExact(node, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_insert_item$MH() {
        return RuntimeHelper.requireNonNull(constants$20.plist_array_insert_item$MH,"plist_array_insert_item");
    }
    /**
     * {@snippet :
     * void plist_array_insert_item(plist_t node, plist_t item, uint32_t n);
     * }
     */
    public static void plist_array_insert_item(MemorySegment node, MemorySegment item, int n) {
        var mh$ = plist_array_insert_item$MH();
        try {
            mh$.invokeExact(node, item, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_remove_item$MH() {
        return RuntimeHelper.requireNonNull(constants$20.plist_array_remove_item$MH,"plist_array_remove_item");
    }
    /**
     * {@snippet :
     * void plist_array_remove_item(plist_t node, uint32_t n);
     * }
     */
    public static void plist_array_remove_item(MemorySegment node, int n) {
        var mh$ = plist_array_remove_item$MH();
        try {
            mh$.invokeExact(node, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_item_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$21.plist_array_item_remove$MH,"plist_array_item_remove");
    }
    /**
     * {@snippet :
     * void plist_array_item_remove(plist_t node);
     * }
     */
    public static void plist_array_item_remove(MemorySegment node) {
        var mh$ = plist_array_item_remove$MH();
        try {
            mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_new_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$21.plist_array_new_iter$MH,"plist_array_new_iter");
    }
    /**
     * {@snippet :
     * void plist_array_new_iter(plist_t node, plist_array_iter* iter);
     * }
     */
    public static void plist_array_new_iter(MemorySegment node, MemorySegment iter) {
        var mh$ = plist_array_new_iter$MH();
        try {
            mh$.invokeExact(node, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_array_next_item$MH() {
        return RuntimeHelper.requireNonNull(constants$21.plist_array_next_item$MH,"plist_array_next_item");
    }
    /**
     * {@snippet :
     * void plist_array_next_item(plist_t node, plist_array_iter iter, plist_t* item);
     * }
     */
    public static void plist_array_next_item(MemorySegment node, MemorySegment iter, MemorySegment item) {
        var mh$ = plist_array_next_item$MH();
        try {
            mh$.invokeExact(node, iter, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_dict_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$21.plist_dict_get_size$MH,"plist_dict_get_size");
    }
    /**
     * {@snippet :
     * uint32_t plist_dict_get_size(plist_t node);
     * }
     */
    public static int plist_dict_get_size(MemorySegment node) {
        var mh$ = plist_dict_get_size$MH();
        try {
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_dict_new_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$21.plist_dict_new_iter$MH,"plist_dict_new_iter");
    }
    /**
     * {@snippet :
     * void plist_dict_new_iter(plist_t node, plist_dict_iter* iter);
     * }
     */
    public static void plist_dict_new_iter(MemorySegment node, MemorySegment iter) {
        var mh$ = plist_dict_new_iter$MH();
        try {
            mh$.invokeExact(node, iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_dict_next_item$MH() {
        return RuntimeHelper.requireNonNull(constants$21.plist_dict_next_item$MH,"plist_dict_next_item");
    }
    /**
     * {@snippet :
     * void plist_dict_next_item(plist_t node, plist_dict_iter iter, char** key, plist_t* val);
     * }
     */
    public static void plist_dict_next_item(MemorySegment node, MemorySegment iter, MemorySegment key, MemorySegment val) {
        var mh$ = plist_dict_next_item$MH();
        try {
            mh$.invokeExact(node, iter, key, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_dict_get_item_key$MH() {
        return RuntimeHelper.requireNonNull(constants$22.plist_dict_get_item_key$MH,"plist_dict_get_item_key");
    }
    /**
     * {@snippet :
     * void plist_dict_get_item_key(plist_t node, char** key);
     * }
     */
    public static void plist_dict_get_item_key(MemorySegment node, MemorySegment key) {
        var mh$ = plist_dict_get_item_key$MH();
        try {
            mh$.invokeExact(node, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_dict_get_item$MH() {
        return RuntimeHelper.requireNonNull(constants$22.plist_dict_get_item$MH,"plist_dict_get_item");
    }
    /**
     * {@snippet :
     * plist_t plist_dict_get_item(plist_t node, char* key);
     * }
     */
    public static MemorySegment plist_dict_get_item(MemorySegment node, MemorySegment key) {
        var mh$ = plist_dict_get_item$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_dict_item_get_key$MH() {
        return RuntimeHelper.requireNonNull(constants$22.plist_dict_item_get_key$MH,"plist_dict_item_get_key");
    }
    /**
     * {@snippet :
     * plist_t plist_dict_item_get_key(plist_t node);
     * }
     */
    public static MemorySegment plist_dict_item_get_key(MemorySegment node) {
        var mh$ = plist_dict_item_get_key$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_dict_set_item$MH() {
        return RuntimeHelper.requireNonNull(constants$22.plist_dict_set_item$MH,"plist_dict_set_item");
    }
    /**
     * {@snippet :
     * void plist_dict_set_item(plist_t node, char* key, plist_t item);
     * }
     */
    public static void plist_dict_set_item(MemorySegment node, MemorySegment key, MemorySegment item) {
        var mh$ = plist_dict_set_item$MH();
        try {
            mh$.invokeExact(node, key, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_dict_remove_item$MH() {
        return RuntimeHelper.requireNonNull(constants$22.plist_dict_remove_item$MH,"plist_dict_remove_item");
    }
    /**
     * {@snippet :
     * void plist_dict_remove_item(plist_t node, char* key);
     * }
     */
    public static void plist_dict_remove_item(MemorySegment node, MemorySegment key) {
        var mh$ = plist_dict_remove_item$MH();
        try {
            mh$.invokeExact(node, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_dict_merge$MH() {
        return RuntimeHelper.requireNonNull(constants$22.plist_dict_merge$MH,"plist_dict_merge");
    }
    /**
     * {@snippet :
     * void plist_dict_merge(plist_t* target, plist_t source);
     * }
     */
    public static void plist_dict_merge(MemorySegment target, MemorySegment source) {
        var mh$ = plist_dict_merge$MH();
        try {
            mh$.invokeExact(target, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$23.plist_get_parent$MH,"plist_get_parent");
    }
    /**
     * {@snippet :
     * plist_t plist_get_parent(plist_t node);
     * }
     */
    public static MemorySegment plist_get_parent(MemorySegment node) {
        var mh$ = plist_get_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_node_type$MH() {
        return RuntimeHelper.requireNonNull(constants$23.plist_get_node_type$MH,"plist_get_node_type");
    }
    /**
     * {@snippet :
     * plist_type plist_get_node_type(plist_t node);
     * }
     */
    public static int plist_get_node_type(MemorySegment node) {
        var mh$ = plist_get_node_type$MH();
        try {
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_key_val$MH() {
        return RuntimeHelper.requireNonNull(constants$23.plist_get_key_val$MH,"plist_get_key_val");
    }
    /**
     * {@snippet :
     * void plist_get_key_val(plist_t node, char** val);
     * }
     */
    public static void plist_get_key_val(MemorySegment node, MemorySegment val) {
        var mh$ = plist_get_key_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_string_val$MH() {
        return RuntimeHelper.requireNonNull(constants$23.plist_get_string_val$MH,"plist_get_string_val");
    }
    /**
     * {@snippet :
     * void plist_get_string_val(plist_t node, char** val);
     * }
     */
    public static void plist_get_string_val(MemorySegment node, MemorySegment val) {
        var mh$ = plist_get_string_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_string_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$23.plist_get_string_ptr$MH,"plist_get_string_ptr");
    }
    /**
     * {@snippet :
     * char* plist_get_string_ptr(plist_t node, uint64_t* length);
     * }
     */
    public static MemorySegment plist_get_string_ptr(MemorySegment node, MemorySegment length) {
        var mh$ = plist_get_string_ptr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_bool_val$MH() {
        return RuntimeHelper.requireNonNull(constants$23.plist_get_bool_val$MH,"plist_get_bool_val");
    }
    /**
     * {@snippet :
     * void plist_get_bool_val(plist_t node, uint8_t* val);
     * }
     */
    public static void plist_get_bool_val(MemorySegment node, MemorySegment val) {
        var mh$ = plist_get_bool_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_uint_val$MH() {
        return RuntimeHelper.requireNonNull(constants$24.plist_get_uint_val$MH,"plist_get_uint_val");
    }
    /**
     * {@snippet :
     * void plist_get_uint_val(plist_t node, uint64_t* val);
     * }
     */
    public static void plist_get_uint_val(MemorySegment node, MemorySegment val) {
        var mh$ = plist_get_uint_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_int_val$MH() {
        return RuntimeHelper.requireNonNull(constants$24.plist_get_int_val$MH,"plist_get_int_val");
    }
    /**
     * {@snippet :
     * void plist_get_int_val(plist_t node, int64_t* val);
     * }
     */
    public static void plist_get_int_val(MemorySegment node, MemorySegment val) {
        var mh$ = plist_get_int_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_real_val$MH() {
        return RuntimeHelper.requireNonNull(constants$24.plist_get_real_val$MH,"plist_get_real_val");
    }
    /**
     * {@snippet :
     * void plist_get_real_val(plist_t node, double* val);
     * }
     */
    public static void plist_get_real_val(MemorySegment node, MemorySegment val) {
        var mh$ = plist_get_real_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_data_val$MH() {
        return RuntimeHelper.requireNonNull(constants$24.plist_get_data_val$MH,"plist_get_data_val");
    }
    /**
     * {@snippet :
     * void plist_get_data_val(plist_t node, char** val, uint64_t* length);
     * }
     */
    public static void plist_get_data_val(MemorySegment node, MemorySegment val, MemorySegment length) {
        var mh$ = plist_get_data_val$MH();
        try {
            mh$.invokeExact(node, val, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_data_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$24.plist_get_data_ptr$MH,"plist_get_data_ptr");
    }
    /**
     * {@snippet :
     * char* plist_get_data_ptr(plist_t node, uint64_t* length);
     * }
     */
    public static MemorySegment plist_get_data_ptr(MemorySegment node, MemorySegment length) {
        var mh$ = plist_get_data_ptr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_date_val$MH() {
        return RuntimeHelper.requireNonNull(constants$24.plist_get_date_val$MH,"plist_get_date_val");
    }
    /**
     * {@snippet :
     * void plist_get_date_val(plist_t node, int32_t* sec, int32_t* usec);
     * }
     */
    public static void plist_get_date_val(MemorySegment node, MemorySegment sec, MemorySegment usec) {
        var mh$ = plist_get_date_val$MH();
        try {
            mh$.invokeExact(node, sec, usec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_get_uid_val$MH() {
        return RuntimeHelper.requireNonNull(constants$25.plist_get_uid_val$MH,"plist_get_uid_val");
    }
    /**
     * {@snippet :
     * void plist_get_uid_val(plist_t node, uint64_t* val);
     * }
     */
    public static void plist_get_uid_val(MemorySegment node, MemorySegment val) {
        var mh$ = plist_get_uid_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_key_val$MH() {
        return RuntimeHelper.requireNonNull(constants$25.plist_set_key_val$MH,"plist_set_key_val");
    }
    /**
     * {@snippet :
     * void plist_set_key_val(plist_t node, char* val);
     * }
     */
    public static void plist_set_key_val(MemorySegment node, MemorySegment val) {
        var mh$ = plist_set_key_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_string_val$MH() {
        return RuntimeHelper.requireNonNull(constants$25.plist_set_string_val$MH,"plist_set_string_val");
    }
    /**
     * {@snippet :
     * void plist_set_string_val(plist_t node, char* val);
     * }
     */
    public static void plist_set_string_val(MemorySegment node, MemorySegment val) {
        var mh$ = plist_set_string_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_bool_val$MH() {
        return RuntimeHelper.requireNonNull(constants$25.plist_set_bool_val$MH,"plist_set_bool_val");
    }
    /**
     * {@snippet :
     * void plist_set_bool_val(plist_t node, uint8_t val);
     * }
     */
    public static void plist_set_bool_val(MemorySegment node, byte val) {
        var mh$ = plist_set_bool_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_uint_val$MH() {
        return RuntimeHelper.requireNonNull(constants$25.plist_set_uint_val$MH,"plist_set_uint_val");
    }
    /**
     * {@snippet :
     * void plist_set_uint_val(plist_t node, uint64_t val);
     * }
     */
    public static void plist_set_uint_val(MemorySegment node, long val) {
        var mh$ = plist_set_uint_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_int_val$MH() {
        return RuntimeHelper.requireNonNull(constants$25.plist_set_int_val$MH,"plist_set_int_val");
    }
    /**
     * {@snippet :
     * void plist_set_int_val(plist_t node, int64_t val);
     * }
     */
    public static void plist_set_int_val(MemorySegment node, long val) {
        var mh$ = plist_set_int_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_real_val$MH() {
        return RuntimeHelper.requireNonNull(constants$26.plist_set_real_val$MH,"plist_set_real_val");
    }
    /**
     * {@snippet :
     * void plist_set_real_val(plist_t node, double val);
     * }
     */
    public static void plist_set_real_val(MemorySegment node, double val) {
        var mh$ = plist_set_real_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_data_val$MH() {
        return RuntimeHelper.requireNonNull(constants$26.plist_set_data_val$MH,"plist_set_data_val");
    }
    /**
     * {@snippet :
     * void plist_set_data_val(plist_t node, char* val, uint64_t length);
     * }
     */
    public static void plist_set_data_val(MemorySegment node, MemorySegment val, long length) {
        var mh$ = plist_set_data_val$MH();
        try {
            mh$.invokeExact(node, val, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_date_val$MH() {
        return RuntimeHelper.requireNonNull(constants$26.plist_set_date_val$MH,"plist_set_date_val");
    }
    /**
     * {@snippet :
     * void plist_set_date_val(plist_t node, int32_t sec, int32_t usec);
     * }
     */
    public static void plist_set_date_val(MemorySegment node, int sec, int usec) {
        var mh$ = plist_set_date_val$MH();
        try {
            mh$.invokeExact(node, sec, usec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_uid_val$MH() {
        return RuntimeHelper.requireNonNull(constants$26.plist_set_uid_val$MH,"plist_set_uid_val");
    }
    /**
     * {@snippet :
     * void plist_set_uid_val(plist_t node, uint64_t val);
     * }
     */
    public static void plist_set_uid_val(MemorySegment node, long val) {
        var mh$ = plist_set_uid_val$MH();
        try {
            mh$.invokeExact(node, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_to_xml$MH() {
        return RuntimeHelper.requireNonNull(constants$26.plist_to_xml$MH,"plist_to_xml");
    }
    /**
     * {@snippet :
     * plist_err_t plist_to_xml(plist_t plist, char** plist_xml, uint32_t* length);
     * }
     */
    public static int plist_to_xml(MemorySegment plist, MemorySegment plist_xml, MemorySegment length) {
        var mh$ = plist_to_xml$MH();
        try {
            return (int)mh$.invokeExact(plist, plist_xml, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_to_bin$MH() {
        return RuntimeHelper.requireNonNull(constants$26.plist_to_bin$MH,"plist_to_bin");
    }
    /**
     * {@snippet :
     * plist_err_t plist_to_bin(plist_t plist, char** plist_bin, uint32_t* length);
     * }
     */
    public static int plist_to_bin(MemorySegment plist, MemorySegment plist_bin, MemorySegment length) {
        var mh$ = plist_to_bin$MH();
        try {
            return (int)mh$.invokeExact(plist, plist_bin, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_to_json$MH() {
        return RuntimeHelper.requireNonNull(constants$27.plist_to_json$MH,"plist_to_json");
    }
    /**
     * {@snippet :
     * plist_err_t plist_to_json(plist_t plist, char** plist_json, uint32_t* length, int prettify);
     * }
     */
    public static int plist_to_json(MemorySegment plist, MemorySegment plist_json, MemorySegment length, int prettify) {
        var mh$ = plist_to_json$MH();
        try {
            return (int)mh$.invokeExact(plist, plist_json, length, prettify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_to_openstep$MH() {
        return RuntimeHelper.requireNonNull(constants$27.plist_to_openstep$MH,"plist_to_openstep");
    }
    /**
     * {@snippet :
     * plist_err_t plist_to_openstep(plist_t plist, char** plist_openstep, uint32_t* length, int prettify);
     * }
     */
    public static int plist_to_openstep(MemorySegment plist, MemorySegment plist_openstep, MemorySegment length, int prettify) {
        var mh$ = plist_to_openstep$MH();
        try {
            return (int)mh$.invokeExact(plist, plist_openstep, length, prettify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_from_xml$MH() {
        return RuntimeHelper.requireNonNull(constants$27.plist_from_xml$MH,"plist_from_xml");
    }
    /**
     * {@snippet :
     * plist_err_t plist_from_xml(char* plist_xml, uint32_t length, plist_t* plist);
     * }
     */
    public static int plist_from_xml(MemorySegment plist_xml, int length, MemorySegment plist) {
        var mh$ = plist_from_xml$MH();
        try {
            return (int)mh$.invokeExact(plist_xml, length, plist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_from_bin$MH() {
        return RuntimeHelper.requireNonNull(constants$27.plist_from_bin$MH,"plist_from_bin");
    }
    /**
     * {@snippet :
     * plist_err_t plist_from_bin(char* plist_bin, uint32_t length, plist_t* plist);
     * }
     */
    public static int plist_from_bin(MemorySegment plist_bin, int length, MemorySegment plist) {
        var mh$ = plist_from_bin$MH();
        try {
            return (int)mh$.invokeExact(plist_bin, length, plist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_from_json$MH() {
        return RuntimeHelper.requireNonNull(constants$27.plist_from_json$MH,"plist_from_json");
    }
    /**
     * {@snippet :
     * plist_err_t plist_from_json(char* json, uint32_t length, plist_t* plist);
     * }
     */
    public static int plist_from_json(MemorySegment json, int length, MemorySegment plist) {
        var mh$ = plist_from_json$MH();
        try {
            return (int)mh$.invokeExact(json, length, plist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_from_openstep$MH() {
        return RuntimeHelper.requireNonNull(constants$27.plist_from_openstep$MH,"plist_from_openstep");
    }
    /**
     * {@snippet :
     * plist_err_t plist_from_openstep(char* openstep, uint32_t length, plist_t* plist);
     * }
     */
    public static int plist_from_openstep(MemorySegment openstep, int length, MemorySegment plist) {
        var mh$ = plist_from_openstep$MH();
        try {
            return (int)mh$.invokeExact(openstep, length, plist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_from_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$28.plist_from_memory$MH,"plist_from_memory");
    }
    /**
     * {@snippet :
     * plist_err_t plist_from_memory(char* plist_data, uint32_t length, plist_t* plist, plist_format_t* format);
     * }
     */
    public static int plist_from_memory(MemorySegment plist_data, int length, MemorySegment plist, MemorySegment format) {
        var mh$ = plist_from_memory$MH();
        try {
            return (int)mh$.invokeExact(plist_data, length, plist, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_read_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$28.plist_read_from_file$MH,"plist_read_from_file");
    }
    /**
     * {@snippet :
     * plist_err_t plist_read_from_file(char* filename, plist_t* plist, plist_format_t* format);
     * }
     */
    public static int plist_read_from_file(MemorySegment filename, MemorySegment plist, MemorySegment format) {
        var mh$ = plist_read_from_file$MH();
        try {
            return (int)mh$.invokeExact(filename, plist, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_write_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$28.plist_write_to_string$MH,"plist_write_to_string");
    }
    /**
     * {@snippet :
     * plist_err_t plist_write_to_string(plist_t plist, char** output, uint32_t* length, plist_format_t format, plist_write_options_t options);
     * }
     */
    public static int plist_write_to_string(MemorySegment plist, MemorySegment output, MemorySegment length, int format, int options) {
        var mh$ = plist_write_to_string$MH();
        try {
            return (int)mh$.invokeExact(plist, output, length, format, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_write_to_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$28.plist_write_to_stream$MH,"plist_write_to_stream");
    }
    /**
     * {@snippet :
     * plist_err_t plist_write_to_stream(plist_t plist, FILE* stream, plist_format_t format, plist_write_options_t options);
     * }
     */
    public static int plist_write_to_stream(MemorySegment plist, MemorySegment stream, int format, int options) {
        var mh$ = plist_write_to_stream$MH();
        try {
            return (int)mh$.invokeExact(plist, stream, format, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_write_to_file$MH() {
        return RuntimeHelper.requireNonNull(constants$28.plist_write_to_file$MH,"plist_write_to_file");
    }
    /**
     * {@snippet :
     * plist_err_t plist_write_to_file(plist_t plist, char* filename, plist_format_t format, plist_write_options_t options);
     * }
     */
    public static int plist_write_to_file(MemorySegment plist, MemorySegment filename, int format, int options) {
        var mh$ = plist_write_to_file$MH();
        try {
            return (int)mh$.invokeExact(plist, filename, format, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_print$MH() {
        return RuntimeHelper.requireNonNull(constants$28.plist_print$MH,"plist_print");
    }
    /**
     * {@snippet :
     * void plist_print(plist_t plist);
     * }
     */
    public static void plist_print(MemorySegment plist) {
        var mh$ = plist_print$MH();
        try {
            mh$.invokeExact(plist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_is_binary$MH() {
        return RuntimeHelper.requireNonNull(constants$29.plist_is_binary$MH,"plist_is_binary");
    }
    /**
     * {@snippet :
     * int plist_is_binary(char* plist_data, uint32_t length);
     * }
     */
    public static int plist_is_binary(MemorySegment plist_data, int length) {
        var mh$ = plist_is_binary$MH();
        try {
            return (int)mh$.invokeExact(plist_data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_access_path$MH() {
        return RuntimeHelper.requireNonNull(constants$29.plist_access_path$MH,"plist_access_path");
    }
    /**
     * {@snippet :
     * plist_t plist_access_path(plist_t plist, uint32_t length,...);
     * }
     */
    public static MemorySegment plist_access_path(MemorySegment plist, int length, Object... x2) {
        var mh$ = plist_access_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(plist, length, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_access_pathv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.plist_access_pathv$MH,"plist_access_pathv");
    }
    /**
     * {@snippet :
     * plist_t plist_access_pathv(plist_t plist, uint32_t length, va_list v);
     * }
     */
    public static MemorySegment plist_access_pathv(MemorySegment plist, int length, MemorySegment v) {
        var mh$ = plist_access_pathv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(plist, length, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_compare_node_value$MH() {
        return RuntimeHelper.requireNonNull(constants$29.plist_compare_node_value$MH,"plist_compare_node_value");
    }
    /**
     * {@snippet :
     * char plist_compare_node_value(plist_t node_l, plist_t node_r);
     * }
     */
    public static byte plist_compare_node_value(MemorySegment node_l, MemorySegment node_r) {
        var mh$ = plist_compare_node_value$MH();
        try {
            return (byte)mh$.invokeExact(node_l, node_r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_bool_val_is_true$MH() {
        return RuntimeHelper.requireNonNull(constants$29.plist_bool_val_is_true$MH,"plist_bool_val_is_true");
    }
    /**
     * {@snippet :
     * int plist_bool_val_is_true(plist_t boolnode);
     * }
     */
    public static int plist_bool_val_is_true(MemorySegment boolnode) {
        var mh$ = plist_bool_val_is_true$MH();
        try {
            return (int)mh$.invokeExact(boolnode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_int_val_is_negative$MH() {
        return RuntimeHelper.requireNonNull(constants$29.plist_int_val_is_negative$MH,"plist_int_val_is_negative");
    }
    /**
     * {@snippet :
     * int plist_int_val_is_negative(plist_t intnode);
     * }
     */
    public static int plist_int_val_is_negative(MemorySegment intnode) {
        var mh$ = plist_int_val_is_negative$MH();
        try {
            return (int)mh$.invokeExact(intnode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_int_val_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$30.plist_int_val_compare$MH,"plist_int_val_compare");
    }
    /**
     * {@snippet :
     * int plist_int_val_compare(plist_t uintnode, int64_t cmpval);
     * }
     */
    public static int plist_int_val_compare(MemorySegment uintnode, long cmpval) {
        var mh$ = plist_int_val_compare$MH();
        try {
            return (int)mh$.invokeExact(uintnode, cmpval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_uint_val_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$30.plist_uint_val_compare$MH,"plist_uint_val_compare");
    }
    /**
     * {@snippet :
     * int plist_uint_val_compare(plist_t uintnode, uint64_t cmpval);
     * }
     */
    public static int plist_uint_val_compare(MemorySegment uintnode, long cmpval) {
        var mh$ = plist_uint_val_compare$MH();
        try {
            return (int)mh$.invokeExact(uintnode, cmpval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_uid_val_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$30.plist_uid_val_compare$MH,"plist_uid_val_compare");
    }
    /**
     * {@snippet :
     * int plist_uid_val_compare(plist_t uidnode, uint64_t cmpval);
     * }
     */
    public static int plist_uid_val_compare(MemorySegment uidnode, long cmpval) {
        var mh$ = plist_uid_val_compare$MH();
        try {
            return (int)mh$.invokeExact(uidnode, cmpval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_real_val_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$30.plist_real_val_compare$MH,"plist_real_val_compare");
    }
    /**
     * {@snippet :
     * int plist_real_val_compare(plist_t realnode, double cmpval);
     * }
     */
    public static int plist_real_val_compare(MemorySegment realnode, double cmpval) {
        var mh$ = plist_real_val_compare$MH();
        try {
            return (int)mh$.invokeExact(realnode, cmpval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_date_val_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$30.plist_date_val_compare$MH,"plist_date_val_compare");
    }
    /**
     * {@snippet :
     * int plist_date_val_compare(plist_t datenode, int32_t cmpsec, int32_t cmpusec);
     * }
     */
    public static int plist_date_val_compare(MemorySegment datenode, int cmpsec, int cmpusec) {
        var mh$ = plist_date_val_compare$MH();
        try {
            return (int)mh$.invokeExact(datenode, cmpsec, cmpusec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_string_val_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$30.plist_string_val_compare$MH,"plist_string_val_compare");
    }
    /**
     * {@snippet :
     * int plist_string_val_compare(plist_t strnode, char* cmpval);
     * }
     */
    public static int plist_string_val_compare(MemorySegment strnode, MemorySegment cmpval) {
        var mh$ = plist_string_val_compare$MH();
        try {
            return (int)mh$.invokeExact(strnode, cmpval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_string_val_compare_with_size$MH() {
        return RuntimeHelper.requireNonNull(constants$31.plist_string_val_compare_with_size$MH,"plist_string_val_compare_with_size");
    }
    /**
     * {@snippet :
     * int plist_string_val_compare_with_size(plist_t strnode, char* cmpval, size_t n);
     * }
     */
    public static int plist_string_val_compare_with_size(MemorySegment strnode, MemorySegment cmpval, long n) {
        var mh$ = plist_string_val_compare_with_size$MH();
        try {
            return (int)mh$.invokeExact(strnode, cmpval, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_string_val_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$31.plist_string_val_contains$MH,"plist_string_val_contains");
    }
    /**
     * {@snippet :
     * int plist_string_val_contains(plist_t strnode, char* substr);
     * }
     */
    public static int plist_string_val_contains(MemorySegment strnode, MemorySegment substr) {
        var mh$ = plist_string_val_contains$MH();
        try {
            return (int)mh$.invokeExact(strnode, substr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_key_val_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$31.plist_key_val_compare$MH,"plist_key_val_compare");
    }
    /**
     * {@snippet :
     * int plist_key_val_compare(plist_t keynode, char* cmpval);
     * }
     */
    public static int plist_key_val_compare(MemorySegment keynode, MemorySegment cmpval) {
        var mh$ = plist_key_val_compare$MH();
        try {
            return (int)mh$.invokeExact(keynode, cmpval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_key_val_compare_with_size$MH() {
        return RuntimeHelper.requireNonNull(constants$31.plist_key_val_compare_with_size$MH,"plist_key_val_compare_with_size");
    }
    /**
     * {@snippet :
     * int plist_key_val_compare_with_size(plist_t keynode, char* cmpval, size_t n);
     * }
     */
    public static int plist_key_val_compare_with_size(MemorySegment keynode, MemorySegment cmpval, long n) {
        var mh$ = plist_key_val_compare_with_size$MH();
        try {
            return (int)mh$.invokeExact(keynode, cmpval, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_key_val_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$31.plist_key_val_contains$MH,"plist_key_val_contains");
    }
    /**
     * {@snippet :
     * int plist_key_val_contains(plist_t keynode, char* substr);
     * }
     */
    public static int plist_key_val_contains(MemorySegment keynode, MemorySegment substr) {
        var mh$ = plist_key_val_contains$MH();
        try {
            return (int)mh$.invokeExact(keynode, substr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_data_val_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$31.plist_data_val_compare$MH,"plist_data_val_compare");
    }
    /**
     * {@snippet :
     * int plist_data_val_compare(plist_t datanode, const uint8_t* cmpval, size_t n);
     * }
     */
    public static int plist_data_val_compare(MemorySegment datanode, MemorySegment cmpval, long n) {
        var mh$ = plist_data_val_compare$MH();
        try {
            return (int)mh$.invokeExact(datanode, cmpval, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_data_val_compare_with_size$MH() {
        return RuntimeHelper.requireNonNull(constants$32.plist_data_val_compare_with_size$MH,"plist_data_val_compare_with_size");
    }
    /**
     * {@snippet :
     * int plist_data_val_compare_with_size(plist_t datanode, const uint8_t* cmpval, size_t n);
     * }
     */
    public static int plist_data_val_compare_with_size(MemorySegment datanode, MemorySegment cmpval, long n) {
        var mh$ = plist_data_val_compare_with_size$MH();
        try {
            return (int)mh$.invokeExact(datanode, cmpval, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_data_val_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$32.plist_data_val_contains$MH,"plist_data_val_contains");
    }
    /**
     * {@snippet :
     * int plist_data_val_contains(plist_t datanode, const uint8_t* cmpval, size_t n);
     * }
     */
    public static int plist_data_val_contains(MemorySegment datanode, MemorySegment cmpval, long n) {
        var mh$ = plist_data_val_contains$MH();
        try {
            return (int)mh$.invokeExact(datanode, cmpval, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$32.plist_sort$MH,"plist_sort");
    }
    /**
     * {@snippet :
     * void plist_sort(plist_t plist);
     * }
     */
    public static void plist_sort(MemorySegment plist) {
        var mh$ = plist_sort$MH();
        try {
            mh$.invokeExact(plist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_mem_free$MH() {
        return RuntimeHelper.requireNonNull(constants$32.plist_mem_free$MH,"plist_mem_free");
    }
    /**
     * {@snippet :
     * void plist_mem_free(void* ptr);
     * }
     */
    public static void plist_mem_free(MemorySegment ptr) {
        var mh$ = plist_mem_free$MH();
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle plist_set_debug$MH() {
        return RuntimeHelper.requireNonNull(constants$32.plist_set_debug$MH,"plist_set_debug");
    }
    /**
     * {@snippet :
     * void plist_set_debug(int debug);
     * }
     */
    public static void plist_set_debug(int debug) {
        var mh$ = plist_set_debug$MH();
        try {
            mh$.invokeExact(debug);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .IDEVICE_E_SUCCESS = 0;
     * }
     */
    public static int IDEVICE_E_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .IDEVICE_E_INVALID_ARG = -1;
     * }
     */
    public static int IDEVICE_E_INVALID_ARG() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .IDEVICE_E_UNKNOWN_ERROR = -2;
     * }
     */
    public static int IDEVICE_E_UNKNOWN_ERROR() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * enum .IDEVICE_E_NO_DEVICE = -3;
     * }
     */
    public static int IDEVICE_E_NO_DEVICE() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * enum .IDEVICE_E_NOT_ENOUGH_DATA = -4;
     * }
     */
    public static int IDEVICE_E_NOT_ENOUGH_DATA() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * enum .IDEVICE_E_SSL_ERROR = -6;
     * }
     */
    public static int IDEVICE_E_SSL_ERROR() {
        return (int)-6L;
    }
    /**
     * {@snippet :
     * enum .IDEVICE_E_TIMEOUT = -7;
     * }
     */
    public static int IDEVICE_E_TIMEOUT() {
        return (int)-7L;
    }
    /**
     * {@snippet :
     * typedef struct idevice_private* idevice_t;
     * }
     */
    public static final OfAddress idevice_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct idevice_connection_private* idevice_connection_t;
     * }
     */
    public static final OfAddress idevice_connection_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum idevice_options.IDEVICE_LOOKUP_USBMUX = 2;
     * }
     */
    public static int IDEVICE_LOOKUP_USBMUX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum idevice_options.IDEVICE_LOOKUP_NETWORK = 4;
     * }
     */
    public static int IDEVICE_LOOKUP_NETWORK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum idevice_options.IDEVICE_LOOKUP_PREFER_NETWORK = 8;
     * }
     */
    public static int IDEVICE_LOOKUP_PREFER_NETWORK() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum idevice_connection_type.CONNECTION_USBMUXD = 1;
     * }
     */
    public static int CONNECTION_USBMUXD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum idevice_connection_type.CONNECTION_NETWORK = 2;
     * }
     */
    public static int CONNECTION_NETWORK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef struct idevice_info* idevice_info_t;
     * }
     */
    public static final OfAddress idevice_info_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum idevice_event_type.IDEVICE_DEVICE_ADD = 1;
     * }
     */
    public static int IDEVICE_DEVICE_ADD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum idevice_event_type.IDEVICE_DEVICE_REMOVE = 2;
     * }
     */
    public static int IDEVICE_DEVICE_REMOVE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum idevice_event_type.IDEVICE_DEVICE_PAIRED = 3;
     * }
     */
    public static int IDEVICE_DEVICE_PAIRED() {
        return (int)3L;
    }
    public static MethodHandle idevice_set_debug_level$MH() {
        return RuntimeHelper.requireNonNull(constants$33.idevice_set_debug_level$MH,"idevice_set_debug_level");
    }
    /**
     * {@snippet :
     * void idevice_set_debug_level(int level);
     * }
     */
    public static void idevice_set_debug_level(int level) {
        var mh$ = idevice_set_debug_level$MH();
        try {
            mh$.invokeExact(level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_event_subscribe$MH() {
        return RuntimeHelper.requireNonNull(constants$33.idevice_event_subscribe$MH,"idevice_event_subscribe");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_event_subscribe(idevice_event_cb_t callback, void* user_data);
     * }
     */
    public static int idevice_event_subscribe(MemorySegment callback, MemorySegment user_data) {
        var mh$ = idevice_event_subscribe$MH();
        try {
            return (int)mh$.invokeExact(callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_event_unsubscribe$MH() {
        return RuntimeHelper.requireNonNull(constants$33.idevice_event_unsubscribe$MH,"idevice_event_unsubscribe");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_event_unsubscribe();
     * }
     */
    public static int idevice_event_unsubscribe() {
        var mh$ = idevice_event_unsubscribe$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_get_device_list$MH() {
        return RuntimeHelper.requireNonNull(constants$33.idevice_get_device_list$MH,"idevice_get_device_list");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_get_device_list(char*** devices, int* count);
     * }
     */
    public static int idevice_get_device_list(MemorySegment devices, MemorySegment count) {
        var mh$ = idevice_get_device_list$MH();
        try {
            return (int)mh$.invokeExact(devices, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_device_list_free$MH() {
        return RuntimeHelper.requireNonNull(constants$33.idevice_device_list_free$MH,"idevice_device_list_free");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_device_list_free(char** devices);
     * }
     */
    public static int idevice_device_list_free(MemorySegment devices) {
        var mh$ = idevice_device_list_free$MH();
        try {
            return (int)mh$.invokeExact(devices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_get_device_list_extended$MH() {
        return RuntimeHelper.requireNonNull(constants$34.idevice_get_device_list_extended$MH,"idevice_get_device_list_extended");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_get_device_list_extended(idevice_info_t** devices, int* count);
     * }
     */
    public static int idevice_get_device_list_extended(MemorySegment devices, MemorySegment count) {
        var mh$ = idevice_get_device_list_extended$MH();
        try {
            return (int)mh$.invokeExact(devices, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_device_list_extended_free$MH() {
        return RuntimeHelper.requireNonNull(constants$34.idevice_device_list_extended_free$MH,"idevice_device_list_extended_free");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_device_list_extended_free(idevice_info_t* devices);
     * }
     */
    public static int idevice_device_list_extended_free(MemorySegment devices) {
        var mh$ = idevice_device_list_extended_free$MH();
        try {
            return (int)mh$.invokeExact(devices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_new$MH() {
        return RuntimeHelper.requireNonNull(constants$34.idevice_new$MH,"idevice_new");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_new(idevice_t* device, char* udid);
     * }
     */
    public static int idevice_new(MemorySegment device, MemorySegment udid) {
        var mh$ = idevice_new$MH();
        try {
            return (int)mh$.invokeExact(device, udid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_new_with_options$MH() {
        return RuntimeHelper.requireNonNull(constants$34.idevice_new_with_options$MH,"idevice_new_with_options");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_new_with_options(idevice_t* device, char* udid, enum idevice_options options);
     * }
     */
    public static int idevice_new_with_options(MemorySegment device, MemorySegment udid, int options) {
        var mh$ = idevice_new_with_options$MH();
        try {
            return (int)mh$.invokeExact(device, udid, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_free$MH() {
        return RuntimeHelper.requireNonNull(constants$34.idevice_free$MH,"idevice_free");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_free(idevice_t device);
     * }
     */
    public static int idevice_free(MemorySegment device) {
        var mh$ = idevice_free$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$34.idevice_connect$MH,"idevice_connect");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_connect(idevice_t device, uint16_t port, idevice_connection_t* connection);
     * }
     */
    public static int idevice_connect(MemorySegment device, short port, MemorySegment connection) {
        var mh$ = idevice_connect$MH();
        try {
            return (int)mh$.invokeExact(device, port, connection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_disconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$35.idevice_disconnect$MH,"idevice_disconnect");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_disconnect(idevice_connection_t connection);
     * }
     */
    public static int idevice_disconnect(MemorySegment connection) {
        var mh$ = idevice_disconnect$MH();
        try {
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_connection_send$MH() {
        return RuntimeHelper.requireNonNull(constants$35.idevice_connection_send$MH,"idevice_connection_send");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_connection_send(idevice_connection_t connection, char* data, uint32_t len, uint32_t* sent_bytes);
     * }
     */
    public static int idevice_connection_send(MemorySegment connection, MemorySegment data, int len, MemorySegment sent_bytes) {
        var mh$ = idevice_connection_send$MH();
        try {
            return (int)mh$.invokeExact(connection, data, len, sent_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_connection_receive_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$35.idevice_connection_receive_timeout$MH,"idevice_connection_receive_timeout");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_connection_receive_timeout(idevice_connection_t connection, char* data, uint32_t len, uint32_t* recv_bytes, unsigned int timeout);
     * }
     */
    public static int idevice_connection_receive_timeout(MemorySegment connection, MemorySegment data, int len, MemorySegment recv_bytes, int timeout) {
        var mh$ = idevice_connection_receive_timeout$MH();
        try {
            return (int)mh$.invokeExact(connection, data, len, recv_bytes, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_connection_receive$MH() {
        return RuntimeHelper.requireNonNull(constants$35.idevice_connection_receive$MH,"idevice_connection_receive");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_connection_receive(idevice_connection_t connection, char* data, uint32_t len, uint32_t* recv_bytes);
     * }
     */
    public static int idevice_connection_receive(MemorySegment connection, MemorySegment data, int len, MemorySegment recv_bytes) {
        var mh$ = idevice_connection_receive$MH();
        try {
            return (int)mh$.invokeExact(connection, data, len, recv_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_connection_enable_ssl$MH() {
        return RuntimeHelper.requireNonNull(constants$35.idevice_connection_enable_ssl$MH,"idevice_connection_enable_ssl");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_connection_enable_ssl(idevice_connection_t connection);
     * }
     */
    public static int idevice_connection_enable_ssl(MemorySegment connection) {
        var mh$ = idevice_connection_enable_ssl$MH();
        try {
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_connection_disable_ssl$MH() {
        return RuntimeHelper.requireNonNull(constants$35.idevice_connection_disable_ssl$MH,"idevice_connection_disable_ssl");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_connection_disable_ssl(idevice_connection_t connection);
     * }
     */
    public static int idevice_connection_disable_ssl(MemorySegment connection) {
        var mh$ = idevice_connection_disable_ssl$MH();
        try {
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_connection_disable_bypass_ssl$MH() {
        return RuntimeHelper.requireNonNull(constants$36.idevice_connection_disable_bypass_ssl$MH,"idevice_connection_disable_bypass_ssl");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_connection_disable_bypass_ssl(idevice_connection_t connection, uint8_t sslBypass);
     * }
     */
    public static int idevice_connection_disable_bypass_ssl(MemorySegment connection, byte sslBypass) {
        var mh$ = idevice_connection_disable_bypass_ssl$MH();
        try {
            return (int)mh$.invokeExact(connection, sslBypass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_connection_get_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$36.idevice_connection_get_fd$MH,"idevice_connection_get_fd");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_connection_get_fd(idevice_connection_t connection, int* fd);
     * }
     */
    public static int idevice_connection_get_fd(MemorySegment connection, MemorySegment fd) {
        var mh$ = idevice_connection_get_fd$MH();
        try {
            return (int)mh$.invokeExact(connection, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_get_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$36.idevice_get_handle$MH,"idevice_get_handle");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_get_handle(idevice_t device, uint32_t* handle);
     * }
     */
    public static int idevice_get_handle(MemorySegment device, MemorySegment handle) {
        var mh$ = idevice_get_handle$MH();
        try {
            return (int)mh$.invokeExact(device, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idevice_get_udid$MH() {
        return RuntimeHelper.requireNonNull(constants$36.idevice_get_udid$MH,"idevice_get_udid");
    }
    /**
     * {@snippet :
     * idevice_error_t idevice_get_udid(idevice_t device, char** udid);
     * }
     */
    public static int idevice_get_udid(MemorySegment device, MemorySegment udid) {
        var mh$ = idevice_get_udid$MH();
        try {
            return (int)mh$.invokeExact(device, udid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    /**
     * {@snippet :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define UTIME_NOW 1073741823
     * }
     */
    public static long UTIME_NOW() {
        return 1073741823L;
    }
    /**
     * {@snippet :
     * #define UTIME_OMIT 1073741822
     * }
     */
    public static long UTIME_OMIT() {
        return 1073741822L;
    }
    /**
     * {@snippet :
     * #define S_IFMT 61440
     * }
     */
    public static int S_IFMT() {
        return (int)61440L;
    }
    /**
     * {@snippet :
     * #define S_IFDIR 16384
     * }
     */
    public static int S_IFDIR() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define S_IFCHR 8192
     * }
     */
    public static int S_IFCHR() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define S_IFBLK 24576
     * }
     */
    public static int S_IFBLK() {
        return (int)24576L;
    }
    /**
     * {@snippet :
     * #define S_IFREG 32768
     * }
     */
    public static int S_IFREG() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define S_IFIFO 4096
     * }
     */
    public static int S_IFIFO() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define S_IFLNK 40960
     * }
     */
    public static int S_IFLNK() {
        return (int)40960L;
    }
    /**
     * {@snippet :
     * #define S_IFSOCK 49152
     * }
     */
    public static int S_IFSOCK() {
        return (int)49152L;
    }
    /**
     * {@snippet :
     * #define S_ISUID 2048
     * }
     */
    public static int S_ISUID() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define S_ISGID 1024
     * }
     */
    public static int S_ISGID() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define S_ISVTX 512
     * }
     */
    public static int S_ISVTX() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define S_IRUSR 256
     * }
     */
    public static int S_IRUSR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define S_IWUSR 128
     * }
     */
    public static int S_IWUSR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define S_IXUSR 64
     * }
     */
    public static int S_IXUSR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define S_IRWXU 448
     * }
     */
    public static int S_IRWXU() {
        return (int)448L;
    }
    /**
     * {@snippet :
     * #define S_IREAD 256
     * }
     */
    public static int S_IREAD() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define S_IWRITE 128
     * }
     */
    public static int S_IWRITE() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define S_IEXEC 64
     * }
     */
    public static int S_IEXEC() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define S_IRGRP 32
     * }
     */
    public static int S_IRGRP() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define S_IWGRP 16
     * }
     */
    public static int S_IWGRP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define S_IXGRP 8
     * }
     */
    public static int S_IXGRP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define S_IRWXG 56
     * }
     */
    public static int S_IRWXG() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define S_IROTH 4
     * }
     */
    public static int S_IROTH() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define S_IWOTH 2
     * }
     */
    public static int S_IWOTH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define S_IXOTH 1
     * }
     */
    public static int S_IXOTH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define S_IRWXO 7
     * }
     */
    public static int S_IRWXO() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define ACCESSPERMS 511
     * }
     */
    public static int ACCESSPERMS() {
        return (int)511L;
    }
    /**
     * {@snippet :
     * #define ALLPERMS 4095
     * }
     */
    public static int ALLPERMS() {
        return (int)4095L;
    }
    /**
     * {@snippet :
     * #define DEFFILEMODE 438
     * }
     */
    public static int DEFFILEMODE() {
        return (int)438L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$36.NULL$ADDR;
    }
    /**
     * {@snippet :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        return constants$36.P_tmpdir$SEGMENT;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define PLIST_UINT 1
     * }
     */
    public static int PLIST_UINT() {
        return (int)1L;
    }
}


